---
swagger: '2.0'
info:
  title: Orion
  description: Orion REST API
  version: "1.0"
# the domain of the service
host: localhost:8081
# array of all schemes that your API supports
schemes: [https, http]
# will be prefixed to all paths
#basePath: /v1
produces: ["application/json"]
paths:
  /file/{path}:
    get:
      summary: |
        Get file or directory located at {path}.
      description: |
        Returns metadata or contents for a file or directory.
      tags: [File]
      parameters:
        - name: path
          in: path
          description: Path to the file or directory.
          required: true
          type: string
        - $ref: '#/parameters/DepthParam'
        - $ref: '#/parameters/PartsParam'
        - $ref: '#/parameters/OrionVersionParam'
      produces: ["application/json", "application/octet-stream"]
      responses:
        200:
          description: |
            Depending on the `parts` parameter, returns one of: metadata, file contents, or a
            multipart response giving both metadata and contents.
          schema:
            # TODO returns file contents application/octet-stream when parts=body
            # TODO returns a multipart request when parts=meta,body
            $ref: '#/definitions/File'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /workspace:
    get:
      summary: List available workspaces.
      description: |
        Workspace metadata is tied to the user owning the workspace. The top level attributes in the response describe
        the user that performed the request. The Workspaces element lists all workspaces accessible by that user.
      tags: [Workspace]
      parameters:
        - $ref: '#/parameters/OrionVersionParam'
      responses:
        200:
          description: List of user's workspaces
          schema:
            $ref: '#/definitions/Workspaces'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /workspace/{id}:
    get:
      summary: Get workspace by Id.
      tags: [Workspace]
      parameters:
        - $ref: '#/parameters/OrionVersionParam'
        - name: id
          in: path
          description: Id of the workspace to fetch.
          required: true
          type: string
      responses:
        200:
          description: A workspace.
          schema:
            $ref: '#/definitions/Workspace'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

definitions:
  AbstractHasChildren:
    allOf:
      - $ref: '#/definitions/AbstractHasLocation'
    required: [ChildrenLocation]
    properties:
      ChildrenLocation:
        description: |
          Location that provides this elements's children. Performing a `GET` on this
          location should return children objects.
        type: string
      Children:
        description: The children of this element.
        type: array
        items:
          type: object
  AbstractHasContent:
    required: [ContentLocation]
    properties:
      ContentLocation:
        description: |
          The location of this object's contents. This field is typically only used when an object
          has both metadata and non-metadata content, in which case `ContentLocation` refers to
          the object's non-metadata content.
        type: string
  AbstractHasId:
    required: [Id]
    properties:
      Id:
        type: string
  AbstractHasLocation:
    required: [Location]
    properties:
      Location:
        description: |
          The location of this object. Performing a `GET` on the Location should return a representation
          of this object.
        type: string
  AbstractHasName:
    required: [Name]
    properties:
      Name:
        type: string

  File:
    allOf:
      - $ref: '#/definitions/AbstractHasChildren'
      - $ref: '#/definitions/AbstractHasContent'
    required:
      - Directory
      - LocalTimeStamp
      - Name
      - Parents
    description: Represents a file or directory.
    properties:
      Attributes:
        description: Additional platform-specific attributes of this file.
        $ref: '#/definitions/FileAttributes'
      Directory:
        type: boolean
        description: Whether this file represents a directory.
      ETag:
        type: string
        description: ETag for this file. Absent when `Directory == true`.
      ExportLocation:
        type: string
        description: Location that provides export functionality. Absent when `Directory == false`.
      Git:
        $ref: '#/definitions/GitMetadata'
      ImportLocation:
        type: string
        description: Location that provides import to this file.
      Length:
        type: integer
        format: int64
        description: |
          Length of this file in bytes. This field is not required to contain a meaningful value for directories.
      LocalTimeStamp:
        $ref: '#/definitions/TimeStamp'
        description: Time
      Name:
        type: string
      Parents:
        type: array
        items:
          $ref: '#/definitions/ParentRef'

  FileAttributes:
    properties:
      Executable:
        type: boolean
      ReadOnly:
        type: boolean
      SymLink:
        type: boolean

  GitMetadata:
    description: TODO

  ParentRef:
    allOf:
      - $ref: '#/definitions/AbstractHasName'
      - $ref: '#/definitions/AbstractHasChildren'
#      - $ref: '#/definitions/AbstractHasLocation'

  ProjectRef:
    description: A reference to a "project" (i.e. a top-level folder in a workspace).
    allOf:
      - $ref: '#/definitions/AbstractHasId'
      - $ref: '#/definitions/AbstractHasName'

  TimeStamp:
    description: Time in milliseconds since 1 January 1970 UTC. This value is expressed relative to the server's local timezone.
    type: number

  Workspaces:
    allOf:
      - $ref: '#/definitions/AbstractHasId'
      - $ref: '#/definitions/AbstractHasName'
    properties:
      UserName:
        type: string
      Workspaces:
        type: array
        items:
          $ref: '#/definitions/WorkspaceRef'

  WorkspaceRef:
    description: "A reference to a workspace. Gives information about where the workspace's complete metadata can be found."
    allOf:
      - $ref: '#/definitions/AbstractHasId'
      - $ref: '#/definitions/AbstractHasLocation'

  Workspace:
    description: |
      A workspace. `Workspace` extends the `File` representation, and provides additional workspace-level
      metadata. This allows a client to treat a Workspace purely as a directory entry, or to access additional
      metadata attributes if required. A Workspace's `Directory` property is always `true`.
    allOf:
      - $ref: '#/definitions/File'
#      - $ref: '#/definitions/AbstractHasChildren'
#      - $ref: '#/definitions/AbstractHasId'
#      - $ref: '#/definitions/AbstractHasLocation'
    properties:
      Projects:
        description: The "projects" (top-level folders) located in this workspace.
        type: array
        items:
          $ref: '#/definitions/ProjectRef'

  Error:
    required:
      - HttpCode
      - Message
      - Severity
    properties:
      Cause:
        type: object
        description: JSON object representation of another status that is the cause of this status (used for exception chaining).
      Code:
        type: integer
        description: Application specific integer response code.
        default: 0
      DetailedMessage:
        type: string
        description: Detailed error message.
      HttpCode:
        type: integer
        description: Integer HTTP response code.
        minimum: 100
        maximum: 600
        exclusiveMaximum: true
      Message:
        type: string
        description: A high level error message.
      SeeAlso:
        type: string
        description: URL of a page for more information on how to resolve the error.
      Severity:
        type: string
        enum: ["Error", "Warning", "Info", "Cancel", "Ok"]

parameters:
  PartsParam:
    name: parts
    in: query
    description: What parts of the file should be returned.
    required: false
    allowEmptyValue: false
    uniqueItems: true
    collectionFormat: csv
    type: array
    items:
      type: string
      enum: ["body", "meta"]
  DepthParam:
    name: depth
    in: query
    description: How many levels of subfolders should be returned.
    required: false
    type: integer
    format: int64
    default: 0
  OrionVersionParam:
    name: Orion-Version
    in: header
    description: |
      All server API requests must include the `Orion-Version` header.
    required: true
    type: string
    enum: ["1.0"]
